import { EthSwap, EthTokenSwap, BtcSwap } from 'swap.swaps'
const secret      = 'c0809ce9f484fdcdfb2d5aabd609768ce0374ee97a1a5618ce4cd3f16c00a078'
const secretHash  = 'c0933f9be51a284acb6b1a6617a48d795bdeaa80'
const lockTime    = 1521171580

const mockAdress = 'mockAdress';
const mockBalance = (adress)=>{
    return Promise.resolve(56);
}
const btcOwnerBitcoin = new BtcSwap({
    fetchBalance: (mockAdress) => mockBalance(mockAdress),
    fetchUnspents: () => {},
    broadcastTx: () => {},
});

test ('Return balance for btcOwner', function(done){
   expect(btcOwnerBitcoin.fetchBalance()).resolves.toEqual(123);
   done();
})
// function countdown(time, progressCallback, doneCallback) {
//     setTimeout(function() {
//         if( time > 1) {
//             countdown(time-1, progressCallback, doneCallback);
//         } else {
//             doneCallback();
//         }
//     }, 1000);
// }


// // const countdown = (doneCallbackSpy)=>new Promise(()=>{doneCallbackSpy();return 'hello'});
// describe('timer suite', function() {
//     test('Should call the done callback when the timer has finished counting', async function  (done) {
//         const result  = await btcOwnerBitcoin.fetchBalance('adress');
//         await console.log(result,'result adress')
//         done(); // <- When this is called, we tell Jest the test is over!
//     },100);
// });

// const btcOwner = {
//     privateKey: 'cRkKzpir8GneA48iQVjSpUGT5mopFRTGDES7Kb43JduzrbhuVncn',
//     publicKey: '02b65eed68f383178ee4bf301d1a2d231194eba2a65969187d49a6cdd945ea4f9d',
// }
// const ethOwner = {
//     privateKey: 'cT5n9yx1xw3TcbvpEAuXvzhrTb5du4RAYbAbTqHfZ9nbq6gJQMGn',
//     publicKey: '02dfae561eb061072da126f1aed7d47202a36b762e89e913c400cdb682360d9620',
// }
//
// jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
//
// const mockFetchingBalance = postJSON();
//

//
// test('adds 1 + 2 to equal 3', async () => {
//     const res = await result.then(res=>{
//         console.log(res,'res final')
//         return res;
//     })
//     expect(res).toBe(2);
//
// });
// console.log(result,'result it final')
// it('works with async/await', async () => {
//     const res = await result.then(res=>{
//         console.log(res,'res final')
//         return res;
//     })
//     expect(result).resolves.toEqual(100);
//     done();
// });

// const ethOwnerBitcoin = new BtcSwap()
//
// const btcOwnerData = btcOwnerBitcoin.login(btcOwner.privateKey)
// const ethOwnerData = ethOwnerBitcoin.login(ethOwner.privateKey)


// test('check secretHash generated by ripemd160', (t) => {
//     const result = crypto.ripemd160(secret)
//     const expected = secretHash
//
//     t.is(result, expected)
// })

// test('create script', (t) => {
//     const result = btcSwap.createScript({
//         secretHash,
//         btcOwnerPublicKey: btcOwner.publicKey,
//         ethOwnerPublicKey: ethOwner.publicKey,
//         lockTime,
//     })
//
//     const expected = {
//         address: '2N6BUwZVN7dwiVFhKK5AyHy152bAptg8jz7',
//         lockTime: 1521171580,
//     }
//
//     t.is(result.address, expected.address)
//     t.is(result.lockTime, expected.lockTime)
// })
//
// test('create + fund + withdraw', async (t) => {
//     const { script, lockTime } = btcSwap.createScript({
//         secretHash,
//         btcOwnerPublicKey: btcOwner.publicKey,
//         ethOwnerPublicKey: ethOwner.publicKey,
//     })
//
//     log('\nCreate complete')
//     log({ script, lockTime })
//
//     const fundResult = await btcSwap.fundScript({ btcData: btcOwnerData, script, lockTime, amount: 0.001 })
//
//     log('\nFund complete')
//     log(fundResult)
//
//     const withdrawResult = await btcSwap.withdraw({ btcData: ethOwnerData, script, secret })
//
//     log('\nWithdraw complete')
//     log(withdrawResult)
// })
